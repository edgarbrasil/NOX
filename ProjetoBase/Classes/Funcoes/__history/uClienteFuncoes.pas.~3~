unit uClienteFuncoes;

interface

uses uCliente{, uClienteData};

type
  TClienteFuncoes = class
  private
    { private declarations }
    //FClienteData: TClienteData;
  protected
    { protected declarations }
  public
    { public declarations }
    constructor Create;
    destructor Destroy; override;

    function Obter(Codigo: Integer): TCliente; overload;
    function Obter(Nome: String): TCliente; overload;
    procedure Inserir(Cliente: TCliente);
    procedure Atualizar(Cliente: TCliente);
    procedure Excluir(Codigo: Integer);


  end;

implementation

uses SysUtils;

{ TClienteFuncoes }

constructor TClienteFuncoes.Create;
begin
  //FClienteData := TClienteData.Create;
end;

destructor TClienteFuncoes.Destroy;
begin
  {if (Assigned(FClienteData)) then
    FreeAndNil(FClienteData);}

  inherited;
end;

procedure TClienteFuncoes.Inserir(Cliente: TCliente);
begin

end;

procedure TClienteFuncoes.Atualizar(Cliente: TCliente);
begin

end;

procedure TClienteFuncoes.Excluir(Codigo: Integer);
begin

end;

function TClienteFuncoes.Obter(Nome: String): TCliente;
begin

end;

function TClienteFuncoes.Obter(Codigo: Integer): TCliente;
begin

end;

end.
